#include <ESP8266WiFi.h>
#include <DHT.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecure.h>
#include <ArduinoJson.h>
#include <ESP8266WebServer.h>

// ========== CONFIGURATION ========== //
// WiFi Credentials
const char* WIFI_SSID = "rss";
const char* WIFI_PASSWORD = "papabol1234";

// Server Configuration
const char* SERVER_URL = "http://192.168.92.9:8501/api/sensor_data";
const int SERVER_PORT = 8501;

// Sensor Pins
#define DHTPIN D4
#define DHTTYPE DHT22
#define SOIL_MOISTURE_PIN A0

// Web Server Port
const int WEB_SERVER_PORT = 80;

// Timing & Retry Settings
const unsigned long POST_INTERVAL = 10000;  // 10 seconds
const unsigned long WIFI_RETRY_DELAY = 5000;  // 5 seconds
const int MAX_HTTP_RETRIES = 3;
const unsigned long SENSOR_READ_INTERVAL = 2000;  // 2 seconds

// ========== GLOBALS ========== //
DHT dht(DHTPIN, DHTTYPE);
ESP8266WebServer webServer(WEB_SERVER_PORT);
unsigned long lastPostTime = 0;
unsigned long lastWifiAttempt = 0;
unsigned long lastSensorReadTime = 0;
bool wifiConnected = false;

// Struct to hold sensor data
struct SensorData {
  float temperature;
  float humidity;
  int soilMoisture;
  unsigned long timestamp;
};

// Current sensor data
SensorData currentData;

// ========== SETUP ========== //
void setup() {
  Serial.begin(115200);
  delay(1000);  // Allow serial monitor to initialize
  
  Serial.println("\n===== IoT Sensor Node Starting =====");
  
  // Initialize sensor
  dht.begin();
  pinMode(SOIL_MOISTURE_PIN, INPUT);
  
  // Initialize WiFi
  initWiFi();

  // Setup web server routes
  setupWebServer();
}

// ========== MAIN LOOP ========== //
void loop() {
  // Maintain WiFi connection
  if (WiFi.status() != WL_CONNECTED) {
    if (millis() - lastWifiAttempt >= WIFI_RETRY_DELAY) {
      Serial.println("[WiFi] Connection lost. Reconnecting...");
      initWiFi();
      lastWifiAttempt = millis();
    }
    return; // Skip rest of loop if WiFi is down
  }
  
  // Handle web client requests
  webServer.handleClient();

  // Read sensors at intervals
  if (millis() - lastSensorReadTime >= SENSOR_READ_INTERVAL) {
    currentData = readSensors();
    currentData.timestamp = millis();
    lastSensorReadTime = millis();
  }
  
  // Post data at intervals (non-blocking)
  if (millis() - lastPostTime >= POST_INTERVAL) {
    bool success = sendSensorData(currentData);
    if (success) {
      lastPostTime = millis();
    } else {
      Serial.println("[HTTP] Failed to send data. Will retry next cycle.");
    }
  }

  delay(100);  // Small delay to stabilize loop
}

// ========== WEB SERVER FUNCTIONS ========== //

// Setup web server routes
void setupWebServer() {
  webServer.on("/", handleRoot);
  webServer.on("/data", handleData);
  webServer.on("/api/sensors", handleSensorAPI);
  webServer.onNotFound(handleNotFound);
  
  webServer.begin();
  Serial.print("[Web] Server started on port ");
  Serial.println(WEB_SERVER_PORT);
}

// Handle root page
void handleRoot() {
  String html = "<!DOCTYPE html>"
                "<html lang='en'>"
                "<head>"
                "  <meta charset='UTF-8'>"
                "  <meta name='viewport' content='width=device-width, initial-scale=1.0'>"
                "  <title>Sensor Monitoring Dashboard</title>"
                "  <style>"
                "    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }"
                "    .container { max-width: 800px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }"
                "    h1 { color: #2c3e50; text-align: center; }"
                "    .card { margin-bottom: 20px; padding: 15px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }"
                "    .temperature { background-color: #fef0f0; border-left: 4px solid #e74c3c; }"
                "    .humidity { background-color: #f0f8fe; border-left: 4px solid #3498db; }"
                "    .soil { background-color: #f0fef8; border-left: 4px solid #27ae60; }"
                "    .sensor-value { font-size: 24px; font-weight: bold; margin: 10px 0; }"
                "    .sensor-label { font-size: 14px; color: #7f8c8d; text-transform: uppercase; }"
                "    .last-updated { text-align: center; color: #95a5a6; font-size: 12px; margin-top: 20px; }"
                "    .refresh-btn { display: block; margin: 20px auto; padding: 10px 20px; background-color: #3498db; color: white; border: none; border-radius: 5px; cursor: pointer; }"
                "    .refresh-btn:hover { background-color: #2980b9; }"
                "    @media (min-width: 600px) {"
                "      .grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; }"
                "      .card { margin-bottom: 0; }"
                "    }"
                "  </style>"
                "</head>"
                "<body>"
                "  <div class='container'>"
                "    <h1>Sensor Monitoring Dashboard</h1>"
                "    <div class='grid'>"
                "      <div class='card temperature'>"
                "        <div class='sensor-label'>Temperature</div>"
                "        <div id='temp' class='sensor-value'>--</div>"
                "        <div>°C</div>"
                "      </div>"
                "      <div class='card humidity'>"
                "        <div class='sensor-label'>Humidity</div>"
                "        <div id='humidity' class='sensor-value'>--</div>"
                "        <div>%</div>"
                "      </div>"
                "      <div class='card soil'>"
                "        <div class='sensor-label'>Soil Moisture</div>"
                "        <div id='soil' class='sensor-value'>--</div>"
                "        <div>Level</div>"
                "      </div>"
                "    </div>"
                "    <button class='refresh-btn' onclick='fetchData()'>Refresh Data</button>"
                "    <div id='last-updated' class='last-updated'>Last updated: Never</div>"
                "  </div>"
                "  <script>"
                "    function fetchData() {"
                "      fetch('/api/sensors')"
                "        .then(response => response.json())"
                "        .then(data => {"
                "          document.getElementById('temp').textContent = data.temperature.toFixed(1);"
                "          document.getElementById('humidity').textContent = data.humidity.toFixed(1);"
                "          document.getElementById('soil').textContent = data.soil_moisture;"
                "          document.getElementById('last-updated').textContent = 'Last updated: ' + new Date().toLocaleTimeString();"
                "        })"
                "        .catch(error => console.error('Error fetching data:', error));"
                "    }"
                "    // Load data when page loads"
                "    document.addEventListener('DOMContentLoaded', fetchData);"
                "    // Auto refresh every 5 seconds"
                "    setInterval(fetchData, 5000);"
                "  </script>"
                "</body>"
                "</html>";
  
  webServer.send(200, "text/html", html);
}

// Handle data page with simple visualization
void handleData() {
  float temp = currentData.temperature;
  float humidity = currentData.humidity;
  int soil = currentData.soilMoisture;
  
  String html = "<html><head><title>Sensor Data</title></head>"
                "<body style='font-family: Arial;'>"
                "<h1>Current Sensor Readings</h1>"
                "<p>Temperature: " + String(temp) + " °C</p>"
                "<p>Humidity: " + String(humidity) + " %</p>"
                "<p>Soil Moisture: " + String(soil) + "</p>"
                "<p><a href='/'>Back to Dashboard</a></p>"
                "</body></html>";
  
  webServer.send(200, "text/html", html);
}

// API endpoint for sensor data
void handleSensorAPI() {
  DynamicJsonDocument doc(256);
  doc["temperature"] = currentData.temperature;
  doc["humidity"] = currentData.humidity;
  doc["soil_moisture"] = currentData.soilMoisture;
  doc["timestamp"] = currentData.timestamp;
  
  String jsonResponse;
  serializeJson(doc, jsonResponse);
  
  webServer.send(200, "application/json", jsonResponse);
}

// Handle 404 not found
void handleNotFound() {
  webServer.send(404, "text/plain", "Page Not Found");
}

// ========== CORE FUNCTIONS ========== //

// Initialize WiFi connection
void initWiFi() {
  Serial.print("\n[WiFi] Connecting to: ");
  Serial.println(WIFI_SSID);
  
  WiFi.disconnect(true);  // Clear previous config
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 15) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    wifiConnected = true;
    Serial.println("\n[WiFi] Connected!");
    Serial.print("[WiFi] IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    wifiConnected = false;
    Serial.println("\n[WiFi] Connection failed!");
  }
}

// Read all sensors and return structured data
SensorData readSensors() {
  SensorData data;
  
  // Read DHT sensor
  data.temperature = dht.readTemperature();
  data.humidity = dht.readHumidity();
  
  // Validate DHT readings
  if (isnan(data.temperature) || isnan(data.humidity)) {
    Serial.println("[SENSOR] ERROR: Failed to read DHT sensor!");
    data.temperature = -1.0;  // Error values
    data.humidity = -1.0;
  }
  
  // Read soil moisture (0-1023)
  data.soilMoisture = analogRead(SOIL_MOISTURE_PIN);
  
  // Debug output
  Serial.println("\n[SENSOR] Readings:");
  Serial.print("  Temperature: "); Serial.print(data.temperature); Serial.println(" °C");
  Serial.print("  Humidity: "); Serial.print(data.humidity); Serial.println(" %");
  Serial.print("  Soil Moisture: "); Serial.println(data.soilMoisture);
  
  return data;
}

// Send data to server with retry logic
bool sendSensorData(const SensorData& data) {
  WiFiClient client;
  HTTPClient http;
  
  // Create JSON payload
  DynamicJsonDocument doc(256);
  doc["temperature"] = data.temperature;
  doc["humidity"] = data.humidity;
  doc["soil_moisture"] = data.soilMoisture;
  
  String payload;
  serializeJson(doc, payload);
  
  Serial.println("\n[HTTP] Attempting to send data:");
  Serial.println(payload);

  // Retry logic
  for (int attempt = 1; attempt <= MAX_HTTP_RETRIES; attempt++) {
    if (http.begin(client, SERVER_URL)) {
      http.addHeader("Content-Type", "application/json");
      
      int httpCode = http.POST(payload);
      
      if (httpCode > 0) {
        Serial.printf("[HTTP] Response code: %d (Attempt %d/%d)\n", 
                     httpCode, attempt, MAX_HTTP_RETRIES);
        
        if (httpCode == HTTP_CODE_OK) {
          String response = http.getString();
          Serial.println("[HTTP] Server response: " + response);
          http.end();
          return true;
        }
      } else {
        Serial.printf("[HTTP] POST failed, error: %s\n", 
                     http.errorToString(httpCode).c_str());
      }
      
      http.end();
    } else {
      Serial.println("[HTTP] Failed to connect to server");
    }
    
    if (attempt < MAX_HTTP_RETRIES) {
      delay(2000);  // Wait before retrying
    }
  }
  
  return false;  // All attempts failed
}